// Generated by Bisonc++ V6.02.04 on Fri, 16 Jul 2021 10:12:35 +0700

#ifndef Parser_h_included
#define Parser_h_included

// $insert baseclass
#include "Parserbase.h"
// $insert scanner.h
#include "Scanner.h"

#include <vector>
#include <map>
#include <list>

extern int line;
extern std::vector<unsigned char> g_programm;
extern std::map<std::string,unsigned char> map_value;
extern std::map<std::string,unsigned char> map_label;
extern std::map<std::string,std::list<unsigned char>> map_label_list;
extern std::map<std::string,unsigned char> map_command;
extern std::map<std::string,unsigned char> map_reg;

#undef Parser
    // CAVEAT: between the baseclass-include directive and the 
    // #undef directive in the previous line references to Parser 
    // are read as ParserBase.
    // If you need to include additional headers in this file 
    // you should do so after these comment-lines.


class Parser: public ParserBase
{
    // $insert scannerobject
    Scanner d_scanner;
        
    public:
        Parser(std::istream &) ;
        int parse();

    private:
        void error();                   // called on (syntax) errors
        int lex();                      // returns the next token from the
                                        // lexical scanner. 
        void print();                   // use, e.g., d_token, d_loc
        void exceptionHandler(std::exception const &exc);

    // support functions for parse():
        void executeAction_(int ruleNr);
        void errorRecovery_();
        void nextCycle_();
        void nextToken_();
        void print_();
};


#endif
